<?php

namespace App\Services\Formatters;

use Illuminate\Support\Facades\Log;

class TextFormatter implements WeatherFormatterInterface
{
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
     *
     * @param  array  $weatherData  –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
     * @param  string  $locationName  –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
     * @return string –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public function format_old(array $weatherData, string $locationName): string
    {
        $message = "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {$locationName} –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n";

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ
        ksort($weatherData);

        $timeRanges = config('weather.time_ranges');

        foreach ($weatherData as $dayKey => $dayData) {
            $dayName = reset($dayData)['day_name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            $message .= "{$dayName}:\n";

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (—É—Ç—Ä–æ, –ø–æ–ª–¥–µ–Ω—å, –≤–µ—á–µ—Ä)
            ksort($dayData);

            foreach ($dayData as $timeRangeKey => $timeData) {
                if (! isset($timeRanges[$timeRangeKey])) {
                    continue;
                }

                $timeRangeInfo = $timeRanges[$timeRangeKey];
                $emoji = $timeRangeInfo['emoji'];
                $timeName = $timeRangeInfo['name'];
                $timeRange = "({$timeRangeInfo['start']}:00‚Äì{$timeRangeInfo['end']}:00)";

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–≥–æ–¥—ã
                $temp = ($timeData['temp'] !== null) ? round($timeData['temp']).'¬∞C' : '–ù/–î';
                $wind = ($timeData['wind'] !== null) ? round($timeData['wind']).' –º/—Å' : '–ù/–î';
                $wave = ($timeData['wave'] !== null) ? round($timeData['wave'], 1).' –º' : '–ù/–î';

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
                $message .= "- {$emoji} {$timeName} {$timeRange}: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {$temp}, –í–µ—Ç–µ—Ä: {$wind}, –í–æ–ª–Ω—ã: {$wave}\n";
            }

            $message .= "\n";
        }

        return $message;
    }

    public function format(array $weatherData, string $locationName): string
    {
        $message = "üìç –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {$locationName}:\n\n";

        ksort($weatherData);
        $timeRanges = config('weather.time_ranges');
        $timeOrder = array_keys($timeRanges); // ['morning', 'noon', 'evening']

        Log::debug('[format]', [$timeOrder]);

        foreach ($weatherData as $dayKey => $dayData) {
            $dayName = reset($dayData)['day_name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            $message .= "üìÖ {$dayName}\n";

            foreach ($dayData as $timeRangeKey => $timeData) {
                if (! isset($timeRanges[$timeRangeKey],$timeRanges[$timeRangeKey])) {
                    continue;
                }

                Log::debug('[format]', [$timeRangeKey => $timeData]);

                $timeRangeInfo = $timeRanges[$timeRangeKey];
                $timeData = $dayData[$timeRangeKey];

                $emoji = $timeRangeInfo['emoji'];
                $timeName = $timeRangeInfo['name'];

                $timeLabel = $emoji.' '.$timeName;

                $temp = ($timeData['temp'] !== null) ? round($timeData['temp']).'¬∞C' : '–ù/–î';
                $wind = ($timeData['wind'] !== null) ? round($timeData['wind']).' –º/—Å' : '–ù/–î';
                $wave = ($timeData['wave'] !== null) ? round($timeData['wave'], 1).' –º' : '–ù/–î';

                $message .= "{$timeLabel}  üå° {$temp}   üí® {$wind}   üåä {$wave}\n";
            }

            $message .= "\n";
        }

        return trim($message);
    }

    public function format_3(array $weatherData, string $locationName): string
    {
        $message = "üìç *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {$locationName} –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n";

        ksort($weatherData);
        $timeRanges = config('weather.time_ranges');

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        $message .= '<code>'.str_pad('–î–µ–Ω—å', 12).str_pad('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 12).str_pad('–í–µ—Ç–µ—Ä', 8).str_pad('–í–æ–ª–Ω—ã', 8).'</code>'.PHP_EOL;

        foreach ($weatherData as $dayKey => $dayData) {
            $dayName = reset($dayData)['day_name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            $message .= "<b>{$dayName}:</b>\n";

            ksort($dayData);

            foreach ($dayData as $timeRangeKey => $timeData) {
                if (! isset($timeRanges[$timeRangeKey])) {
                    continue;
                }

                $timeRangeInfo = $timeRanges[$timeRangeKey];
                $emoji = $timeRangeInfo['emoji'];
                $timeName = $timeRangeInfo['name'];

                // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                $temp = ($timeData['temp'] !== null) ? round($timeData['temp']) : null;
                $tempFormatted = ($temp !== null) ? $temp.'¬∞C' : '–ù/–î';

                // –í–µ—Ç–µ—Ä
                $wind = ($timeData['wind'] !== null) ? round($timeData['wind']).' –º/—Å' : '–ù/–î';

                // –í–æ–ª–Ω—ã
                $wave = ($timeData['wave'] !== null) ? round($timeData['wave'], 1).' –º' : '–ù/–î';

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                $row = $emoji.' '.$timeName.': ';
                $row .= str_pad($tempFormatted, 12);
                $row .= str_pad($wind, 8);
                $row .= str_pad($wave, 8);

                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
                $message .= "<code>{$row}</code>".PHP_EOL;
            }

            $message .= PHP_EOL;
        }

        return $message;
    }

    public function format_5(array $weatherData, string $locationName): string
    {
        $message = "üìç *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {$locationName} –Ω–∞ –Ω–µ–¥–µ–ª—é*\n\n";

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–Ω–µ–π
        ksort($weatherData);
        $timeRanges = config('weather.time_ranges');

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        $message .= "++==================================================++\n";
        $message .= "| –î–µ–Ω—å     | –í—Ä–µ–º—è   | üå° –¢–µ–º–ø | üí® –í–µ—Ç–µ—Ä | üåä –í–æ–ª–Ω—ã |\n";
        $message .= "++==================================================++\n";

        foreach ($weatherData as $dayKey => $dayData) {
            $dayName = mb_substr(reset($dayData)['day_name'] ?? '???', 0, 9);
            $firstRow = true;

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º—ë–Ω —Å—É—Ç–æ–∫
            ksort($dayData);

            foreach ($dayData as $timeKey => $entry) {
                if (! isset($timeRanges[$timeKey])) {
                    continue;
                }

                $timeInfo = $timeRanges[$timeKey];
                $emoji = $timeInfo['emoji'];
                $timeLabel = $emoji.' '.str_pad($timeInfo['name'], 6);

                $temp = $entry['temp'] !== null ? round($entry['temp']) : '–ù/–î';
                $wind = $entry['wind'] !== null ? round($entry['wind']) : '–ù/–î';
                $wave = $entry['wave'] !== null ? round($entry['wave'], 1) : '–ù/–î';

                // –¶–≤–µ—Ç–æ–≤—ã–µ –∑–Ω–∞—á–∫–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –ø–æ –≥—Ä–∞–¥–∞—Ü–∏—è–º)
                $tempColor = $this->tempColor($temp);
                $windColor = $this->windColor($wind);
                $waveColor = $this->waveColor($wave);

                // –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏
                $message .= sprintf(
                    "| %-9s| %-8s| %s %3s¬∞C | %s %3s –º/—Å | %s %4s –º |\n",
                    $firstRow ? $dayName : '',
                    $timeLabel,
                    $tempColor, $temp,
                    $windColor, $wind,
                    $waveColor, $wave
                );

                $firstRow = false;
            }

            $message .= "++--------------------------------------------------++\n";
        }

        return $message;
    }

    private function tempColor($temp)
    {
        if ($temp === '–ù/–î') {
            return '‚ö™Ô∏è';
        }
        if ($temp < 10) {
            return 'üîµ';
        }
        if ($temp < 20) {
            return 'üü¢';
        }
        if ($temp < 30) {
            return 'üü°';
        }

        return 'üî¥';
    }

    private function windColor($wind)
    {
        if ($wind === '–ù/–î') {
            return '‚ö™Ô∏è';
        }
        if ($wind < 3) {
            return 'üü¶';
        }
        if ($wind < 6) {
            return 'üü®';
        }

        return 'üü•';
    }

    private function waveColor($wave)
    {
        if ($wave === '–ù/–î') {
            return '‚ö™Ô∏è';
        }
        if ($wave < 0.5) {
            return 'üü¶';
        }
        if ($wave < 1.0) {
            return 'üü©';
        }

        return 'üü•';
    }
}
