<?php

namespace App\Services\Formatters;

class MarkdownFormatter implements WeatherFormatterInterface
{
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Markdown-—Ç–∞–±–ª–∏—Ü—É
     *
     * @param  array  $weatherData  –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
     * @param  string  $locationName  –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
     * @return string –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public function format_init(array $weatherData, string $locationName): string
    {
        $message = "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {$locationName}:\n";
        $message .= "| –î–µ–Ω—å | –í—Ä–µ–º—è | –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ | –í–µ—Ç–µ—Ä | –í–æ–ª–Ω—ã |\n";
        $message .= "|------|-------|-------------|-------|-------|\n";

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ
        ksort($weatherData);

        $timeRanges = config('weather.time_ranges');
        $previousDay = null;

        foreach ($weatherData as $dayKey => $dayData) {
            $dayName = reset($dayData)['day_name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            ksort($dayData);

            foreach ($dayData as $timeRangeKey => $timeData) {
                if (! isset($timeRanges[$timeRangeKey])) {
                    continue;
                }

                $timeRangeInfo = $timeRanges[$timeRangeKey];
                $emoji = $timeRangeInfo['emoji'];
                $timeName = $timeRangeInfo['name'];

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–≥–æ–¥—ã
                $temp = ($timeData['temp'] !== null) ? round($timeData['temp']).'¬∞C' : '–ù/–î';
                $wind = ($timeData['wind'] !== null) ? round($timeData['wind']).' –º/—Å' : '–ù/–î';
                $wave = ($timeData['wave'] !== null) ? round($timeData['wave'], 1).' –º' : '–ù/–î';

                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
                if ($previousDay !== $dayName) {
                    $message .= "| {$dayName} | {$emoji} {$timeName} | {$temp} | {$wind} | {$wave} |\n";
                } else {
                    $message .= "|  | {$emoji} {$timeName} | {$temp} | {$wind} | {$wave} |\n";
                }

                $previousDay = $dayName;
            }
        }

        return $message;
    }

    public function format_2(array $weatherData, string $locationName): string
    {
        $message = "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è *{$locationName}* –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n";
        $message .= "| **–î–µ–Ω—å** | **–í—Ä–µ–º—è** | **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞** | **–í–µ—Ç–µ—Ä** | **–í–æ–ª–Ω—ã** |\n";
        $message .= "|----------|-----------|-----------------|-----------|-----------|\n";

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ
        ksort($weatherData);

        $timeRanges = config('weather.time_ranges');
        $previousDay = null;

        foreach ($weatherData as $dayKey => $dayData) {
            $dayName = reset($dayData)['day_name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
            if ($previousDay !== $dayName) {
                $message .= "\n| *{$dayName}* | | | | |\n"; // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (—É—Ç—Ä–æ, –ø–æ–ª–¥–µ–Ω—å, –≤–µ—á–µ—Ä)
            ksort($dayData);

            foreach ($dayData as $timeRangeKey => $timeData) {
                if (! isset($timeRanges[$timeRangeKey])) {
                    continue;
                }

                $timeRangeInfo = $timeRanges[$timeRangeKey];
                $emoji = $timeRangeInfo['emoji'];
                $timeName = $timeRangeInfo['name'];

                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–≥–æ–¥—ã
                $temp = ($timeData['temp'] !== null) ? round($timeData['temp']).'¬∞C' : '–ù/–î';
                $wind = ($timeData['wind'] !== null) ? round($timeData['wind']).' –º/—Å' : '–ù/–î';
                $wave = ($timeData['wave'] !== null) ? round($timeData['wave'], 1).' –º' : '–ù/–î';

                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã —Å —ç–º–æ–¥–∑–∏
                $message .= "|  | {$emoji} *{$timeName}* | **{$temp}** | **{$wind}** | **{$wave}** |\n";
            }

            $previousDay = $dayName;
        }

        return $message;
    }

    public function format(array $weatherData, string $locationName): string
    {
        $message = "üìç *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {$locationName} –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n";

        ksort($weatherData);
        $timeRanges = config('weather.time_ranges');

        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤
        $columnWidth = 12; // –®–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è)

        foreach ($weatherData as $dayKey => $dayData) {
            $dayName = reset($dayData)['day_name'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            $message .= "üìÖ *{$dayName}*\n";

            ksort($dayData);

            foreach ($dayData as $timeRangeKey => $timeData) {
                if (! isset($timeRanges[$timeRangeKey])) {
                    continue;
                }

                $timeRangeInfo = $timeRanges[$timeRangeKey];
                $emoji = $timeRangeInfo['emoji'];
                $timeName = $timeRangeInfo['name'];

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                $temp = ($timeData['temp'] !== null) ? round($timeData['temp']) : null;
                if ($temp !== null) {
                    // –¶–≤–µ—Ç –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å Windy)
                    if ($temp > 25) {
                        $tempFormatted = "üüß *{$temp}¬∞C*";
                    } elseif ($temp < 10) {
                        $tempFormatted = "üü® _{$temp}¬∞C_";
                    } else {
                        $tempFormatted = "üü¶ {$temp}¬∞C";
                    }
                } else {
                    $tempFormatted = '–ù/–î';
                }

                // –í–µ—Ç–µ—Ä
                $wind = ($timeData['wind'] !== null) ? round($timeData['wind']).' –º/—Å' : '–ù/–î';
                $windColor = $this->getWindColor($timeData['wind']);
                $windFormatted = "{$windColor} {$wind}";

                // –í–æ–ª–Ω—ã
                $wave = ($timeData['wave'] !== null) ? round($timeData['wave'], 1).' –º' : '–ù/–î';
                $waveColor = $this->getWaveColor($timeData['wave']);
                $waveFormatted = "{$waveColor} {$wave}";

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
                $message .= "{$emoji} *{$timeName}:* "
                          .str_pad($tempFormatted, $columnWidth)
                          .str_pad($windFormatted, $columnWidth)
                          .str_pad($waveFormatted, $columnWidth)."\n";
            }

            $message .= "\n";
        }

        return trim($message);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≤–µ—Ç—Ä–∞ –ø–æ —à–∫–∞–ª–µ Windy
    private function getWindColor($windSpeed): string
    {
        if ($windSpeed <= 3) {
            return 'üü¶'; // –õ–µ–≥–∫–∏–π –≤–µ—Ç–µ—Ä
        } elseif ($windSpeed <= 8) {
            return 'üüß'; // –°—Ä–µ–¥–Ω–∏–π –≤–µ—Ç–µ—Ä
        } else {
            return 'üü•'; // –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≤–æ–ª–Ω –ø–æ —à–∫–∞–ª–µ Windy
    private function getWaveColor($waveHeight): string
    {
        if ($waveHeight <= 0.5) {
            return 'üü©'; // –ú–∞–ª–µ–Ω—å–∫–∏–µ –≤–æ–ª–Ω—ã
        } elseif ($waveHeight <= 1.5) {
            return 'üüß'; // –°—Ä–µ–¥–Ω–∏–µ –≤–æ–ª–Ω—ã
        } else {
            return 'üü•'; // –ë–æ–ª—å—à–∏–µ –≤–æ–ª–Ω—ã
        }
    }
}
